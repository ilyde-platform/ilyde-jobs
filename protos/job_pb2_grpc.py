#
# Copyright (c) 2020-2021 Hopenly srl.
#
# This file is part of Ilyde.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from protos import job_pb2 as job__pb2


class WorkspaceServicesStub(object):
    """The workspace service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Retrieve = channel.unary_unary(
                '/jobs.WorkspaceServices/Retrieve',
                request_serializer=job__pb2.ID.SerializeToString,
                response_deserializer=job__pb2.Workspace.FromString,
                )
        self.Create = channel.unary_unary(
                '/jobs.WorkspaceServices/Create',
                request_serializer=job__pb2.Workspace.SerializeToString,
                response_deserializer=job__pb2.Workspace.FromString,
                )
        self.Update = channel.unary_unary(
                '/jobs.WorkspaceServices/Update',
                request_serializer=job__pb2.Workspace.SerializeToString,
                response_deserializer=job__pb2.Workspace.FromString,
                )
        self.Delete = channel.unary_unary(
                '/jobs.WorkspaceServices/Delete',
                request_serializer=job__pb2.ID.SerializeToString,
                response_deserializer=job__pb2.Status.FromString,
                )
        self.Search = channel.unary_unary(
                '/jobs.WorkspaceServices/Search',
                request_serializer=job__pb2.SearchRequest.SerializeToString,
                response_deserializer=job__pb2.SearchWorkspaceResponse.FromString,
                )
        self.Start = channel.unary_unary(
                '/jobs.WorkspaceServices/Start',
                request_serializer=job__pb2.ID.SerializeToString,
                response_deserializer=job__pb2.Status.FromString,
                )
        self.State = channel.unary_unary(
                '/jobs.WorkspaceServices/State',
                request_serializer=job__pb2.ID.SerializeToString,
                response_deserializer=job__pb2.JobState.FromString,
                )
        self.Stop = channel.unary_unary(
                '/jobs.WorkspaceServices/Stop',
                request_serializer=job__pb2.ID.SerializeToString,
                response_deserializer=job__pb2.Status.FromString,
                )


class WorkspaceServicesServicer(object):
    """The workspace service definition.
    """

    def Retrieve(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Start(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def State(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkspaceServicesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Retrieve': grpc.unary_unary_rpc_method_handler(
                    servicer.Retrieve,
                    request_deserializer=job__pb2.ID.FromString,
                    response_serializer=job__pb2.Workspace.SerializeToString,
            ),
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=job__pb2.Workspace.FromString,
                    response_serializer=job__pb2.Workspace.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=job__pb2.Workspace.FromString,
                    response_serializer=job__pb2.Workspace.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=job__pb2.ID.FromString,
                    response_serializer=job__pb2.Status.SerializeToString,
            ),
            'Search': grpc.unary_unary_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=job__pb2.SearchRequest.FromString,
                    response_serializer=job__pb2.SearchWorkspaceResponse.SerializeToString,
            ),
            'Start': grpc.unary_unary_rpc_method_handler(
                    servicer.Start,
                    request_deserializer=job__pb2.ID.FromString,
                    response_serializer=job__pb2.Status.SerializeToString,
            ),
            'State': grpc.unary_unary_rpc_method_handler(
                    servicer.State,
                    request_deserializer=job__pb2.ID.FromString,
                    response_serializer=job__pb2.JobState.SerializeToString,
            ),
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=job__pb2.ID.FromString,
                    response_serializer=job__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'jobs.WorkspaceServices', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WorkspaceServices(object):
    """The workspace service definition.
    """

    @staticmethod
    def Retrieve(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.WorkspaceServices/Retrieve',
            job__pb2.ID.SerializeToString,
            job__pb2.Workspace.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.WorkspaceServices/Create',
            job__pb2.Workspace.SerializeToString,
            job__pb2.Workspace.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.WorkspaceServices/Update',
            job__pb2.Workspace.SerializeToString,
            job__pb2.Workspace.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.WorkspaceServices/Delete',
            job__pb2.ID.SerializeToString,
            job__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.WorkspaceServices/Search',
            job__pb2.SearchRequest.SerializeToString,
            job__pb2.SearchWorkspaceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.WorkspaceServices/Start',
            job__pb2.ID.SerializeToString,
            job__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def State(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.WorkspaceServices/State',
            job__pb2.ID.SerializeToString,
            job__pb2.JobState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.WorkspaceServices/Stop',
            job__pb2.ID.SerializeToString,
            job__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ModelApisServicesStub(object):
    """The ModelApis service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Retrieve = channel.unary_unary(
                '/jobs.ModelApisServices/Retrieve',
                request_serializer=job__pb2.ID.SerializeToString,
                response_deserializer=job__pb2.ModelApis.FromString,
                )
        self.Create = channel.unary_unary(
                '/jobs.ModelApisServices/Create',
                request_serializer=job__pb2.ModelApis.SerializeToString,
                response_deserializer=job__pb2.ModelApis.FromString,
                )
        self.Delete = channel.unary_unary(
                '/jobs.ModelApisServices/Delete',
                request_serializer=job__pb2.ID.SerializeToString,
                response_deserializer=job__pb2.Status.FromString,
                )
        self.Search = channel.unary_unary(
                '/jobs.ModelApisServices/Search',
                request_serializer=job__pb2.SearchRequest.SerializeToString,
                response_deserializer=job__pb2.SearchModelApisResponse.FromString,
                )
        self.Start = channel.unary_unary(
                '/jobs.ModelApisServices/Start',
                request_serializer=job__pb2.ID.SerializeToString,
                response_deserializer=job__pb2.Status.FromString,
                )
        self.State = channel.unary_unary(
                '/jobs.ModelApisServices/State',
                request_serializer=job__pb2.ID.SerializeToString,
                response_deserializer=job__pb2.JobState.FromString,
                )
        self.Stop = channel.unary_unary(
                '/jobs.ModelApisServices/Stop',
                request_serializer=job__pb2.ID.SerializeToString,
                response_deserializer=job__pb2.Status.FromString,
                )


class ModelApisServicesServicer(object):
    """The ModelApis service definition.
    """

    def Retrieve(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Start(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def State(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelApisServicesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Retrieve': grpc.unary_unary_rpc_method_handler(
                    servicer.Retrieve,
                    request_deserializer=job__pb2.ID.FromString,
                    response_serializer=job__pb2.ModelApis.SerializeToString,
            ),
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=job__pb2.ModelApis.FromString,
                    response_serializer=job__pb2.ModelApis.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=job__pb2.ID.FromString,
                    response_serializer=job__pb2.Status.SerializeToString,
            ),
            'Search': grpc.unary_unary_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=job__pb2.SearchRequest.FromString,
                    response_serializer=job__pb2.SearchModelApisResponse.SerializeToString,
            ),
            'Start': grpc.unary_unary_rpc_method_handler(
                    servicer.Start,
                    request_deserializer=job__pb2.ID.FromString,
                    response_serializer=job__pb2.Status.SerializeToString,
            ),
            'State': grpc.unary_unary_rpc_method_handler(
                    servicer.State,
                    request_deserializer=job__pb2.ID.FromString,
                    response_serializer=job__pb2.JobState.SerializeToString,
            ),
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=job__pb2.ID.FromString,
                    response_serializer=job__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'jobs.ModelApisServices', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ModelApisServices(object):
    """The ModelApis service definition.
    """

    @staticmethod
    def Retrieve(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.ModelApisServices/Retrieve',
            job__pb2.ID.SerializeToString,
            job__pb2.ModelApis.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.ModelApisServices/Create',
            job__pb2.ModelApis.SerializeToString,
            job__pb2.ModelApis.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.ModelApisServices/Delete',
            job__pb2.ID.SerializeToString,
            job__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.ModelApisServices/Search',
            job__pb2.SearchRequest.SerializeToString,
            job__pb2.SearchModelApisResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.ModelApisServices/Start',
            job__pb2.ID.SerializeToString,
            job__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def State(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.ModelApisServices/State',
            job__pb2.ID.SerializeToString,
            job__pb2.JobState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.ModelApisServices/Stop',
            job__pb2.ID.SerializeToString,
            job__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class RunServicesStub(object):
    """The Run service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Get = channel.unary_unary(
                '/jobs.RunServices/Get',
                request_serializer=job__pb2.ID.SerializeToString,
                response_deserializer=job__pb2.Run.FromString,
                )
        self.Submit = channel.unary_unary(
                '/jobs.RunServices/Submit',
                request_serializer=job__pb2.Run.SerializeToString,
                response_deserializer=job__pb2.Status.FromString,
                )
        self.Search = channel.unary_unary(
                '/jobs.RunServices/Search',
                request_serializer=job__pb2.SearchRequest.SerializeToString,
                response_deserializer=job__pb2.SearchRunResponse.FromString,
                )
        self.State = channel.unary_unary(
                '/jobs.RunServices/State',
                request_serializer=job__pb2.ID.SerializeToString,
                response_deserializer=job__pb2.JobState.FromString,
                )
        self.Stop = channel.unary_unary(
                '/jobs.RunServices/Stop',
                request_serializer=job__pb2.ID.SerializeToString,
                response_deserializer=job__pb2.Status.FromString,
                )


class RunServicesServicer(object):
    """The Run service definition.
    """

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Submit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def State(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RunServicesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=job__pb2.ID.FromString,
                    response_serializer=job__pb2.Run.SerializeToString,
            ),
            'Submit': grpc.unary_unary_rpc_method_handler(
                    servicer.Submit,
                    request_deserializer=job__pb2.Run.FromString,
                    response_serializer=job__pb2.Status.SerializeToString,
            ),
            'Search': grpc.unary_unary_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=job__pb2.SearchRequest.FromString,
                    response_serializer=job__pb2.SearchRunResponse.SerializeToString,
            ),
            'State': grpc.unary_unary_rpc_method_handler(
                    servicer.State,
                    request_deserializer=job__pb2.ID.FromString,
                    response_serializer=job__pb2.JobState.SerializeToString,
            ),
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=job__pb2.ID.FromString,
                    response_serializer=job__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'jobs.RunServices', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RunServices(object):
    """The Run service definition.
    """

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.RunServices/Get',
            job__pb2.ID.SerializeToString,
            job__pb2.Run.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Submit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.RunServices/Submit',
            job__pb2.Run.SerializeToString,
            job__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.RunServices/Search',
            job__pb2.SearchRequest.SerializeToString,
            job__pb2.SearchRunResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def State(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.RunServices/State',
            job__pb2.ID.SerializeToString,
            job__pb2.JobState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.RunServices/Stop',
            job__pb2.ID.SerializeToString,
            job__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ExperimentServicesStub(object):
    """The Experiment service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Get = channel.unary_unary(
                '/jobs.ExperimentServices/Get',
                request_serializer=job__pb2.ID.SerializeToString,
                response_deserializer=job__pb2.Experiment.FromString,
                )
        self.Submit = channel.unary_unary(
                '/jobs.ExperimentServices/Submit',
                request_serializer=job__pb2.Experiment.SerializeToString,
                response_deserializer=job__pb2.Status.FromString,
                )
        self.Search = channel.unary_unary(
                '/jobs.ExperimentServices/Search',
                request_serializer=job__pb2.SearchRequest.SerializeToString,
                response_deserializer=job__pb2.SearchExperimentResponse.FromString,
                )
        self.State = channel.unary_unary(
                '/jobs.ExperimentServices/State',
                request_serializer=job__pb2.ID.SerializeToString,
                response_deserializer=job__pb2.JobState.FromString,
                )
        self.Stop = channel.unary_unary(
                '/jobs.ExperimentServices/Stop',
                request_serializer=job__pb2.ID.SerializeToString,
                response_deserializer=job__pb2.Status.FromString,
                )


class ExperimentServicesServicer(object):
    """The Experiment service definition.
    """

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Submit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def State(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExperimentServicesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=job__pb2.ID.FromString,
                    response_serializer=job__pb2.Experiment.SerializeToString,
            ),
            'Submit': grpc.unary_unary_rpc_method_handler(
                    servicer.Submit,
                    request_deserializer=job__pb2.Experiment.FromString,
                    response_serializer=job__pb2.Status.SerializeToString,
            ),
            'Search': grpc.unary_unary_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=job__pb2.SearchRequest.FromString,
                    response_serializer=job__pb2.SearchExperimentResponse.SerializeToString,
            ),
            'State': grpc.unary_unary_rpc_method_handler(
                    servicer.State,
                    request_deserializer=job__pb2.ID.FromString,
                    response_serializer=job__pb2.JobState.SerializeToString,
            ),
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=job__pb2.ID.FromString,
                    response_serializer=job__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'jobs.ExperimentServices', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExperimentServices(object):
    """The Experiment service definition.
    """

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.ExperimentServices/Get',
            job__pb2.ID.SerializeToString,
            job__pb2.Experiment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Submit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.ExperimentServices/Submit',
            job__pb2.Experiment.SerializeToString,
            job__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.ExperimentServices/Search',
            job__pb2.SearchRequest.SerializeToString,
            job__pb2.SearchExperimentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def State(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.ExperimentServices/State',
            job__pb2.ID.SerializeToString,
            job__pb2.JobState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.ExperimentServices/Stop',
            job__pb2.ID.SerializeToString,
            job__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class EnvironmentServicesStub(object):
    """The Environment service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetHardwareTier = channel.unary_unary(
                '/jobs.EnvironmentServices/GetHardwareTier',
                request_serializer=job__pb2.ID.SerializeToString,
                response_deserializer=job__pb2.HardwareTier.FromString,
                )
        self.CreateHardwareTier = channel.unary_unary(
                '/jobs.EnvironmentServices/CreateHardwareTier',
                request_serializer=job__pb2.HardwareTier.SerializeToString,
                response_deserializer=job__pb2.HardwareTier.FromString,
                )
        self.UpdateHardwareTier = channel.unary_unary(
                '/jobs.EnvironmentServices/UpdateHardwareTier',
                request_serializer=job__pb2.HardwareTier.SerializeToString,
                response_deserializer=job__pb2.HardwareTier.FromString,
                )
        self.DeleteHardwareTier = channel.unary_unary(
                '/jobs.EnvironmentServices/DeleteHardwareTier',
                request_serializer=job__pb2.ID.SerializeToString,
                response_deserializer=job__pb2.Status.FromString,
                )
        self.ListHardwareTiers = channel.unary_unary(
                '/jobs.EnvironmentServices/ListHardwareTiers',
                request_serializer=job__pb2.Pagination.SerializeToString,
                response_deserializer=job__pb2.ListHardwareTierResponse.FromString,
                )
        self.ListEnvironments = channel.unary_unary(
                '/jobs.EnvironmentServices/ListEnvironments',
                request_serializer=job__pb2.Pagination.SerializeToString,
                response_deserializer=job__pb2.ListEnvironmentResponse.FromString,
                )
        self.ListWorkspaceIde = channel.unary_unary(
                '/jobs.EnvironmentServices/ListWorkspaceIde',
                request_serializer=job__pb2.Pagination.SerializeToString,
                response_deserializer=job__pb2.ListIdeResponse.FromString,
                )


class EnvironmentServicesServicer(object):
    """The Environment service definition.
    """

    def GetHardwareTier(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateHardwareTier(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateHardwareTier(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteHardwareTier(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListHardwareTiers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListEnvironments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListWorkspaceIde(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EnvironmentServicesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetHardwareTier': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHardwareTier,
                    request_deserializer=job__pb2.ID.FromString,
                    response_serializer=job__pb2.HardwareTier.SerializeToString,
            ),
            'CreateHardwareTier': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateHardwareTier,
                    request_deserializer=job__pb2.HardwareTier.FromString,
                    response_serializer=job__pb2.HardwareTier.SerializeToString,
            ),
            'UpdateHardwareTier': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateHardwareTier,
                    request_deserializer=job__pb2.HardwareTier.FromString,
                    response_serializer=job__pb2.HardwareTier.SerializeToString,
            ),
            'DeleteHardwareTier': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteHardwareTier,
                    request_deserializer=job__pb2.ID.FromString,
                    response_serializer=job__pb2.Status.SerializeToString,
            ),
            'ListHardwareTiers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListHardwareTiers,
                    request_deserializer=job__pb2.Pagination.FromString,
                    response_serializer=job__pb2.ListHardwareTierResponse.SerializeToString,
            ),
            'ListEnvironments': grpc.unary_unary_rpc_method_handler(
                    servicer.ListEnvironments,
                    request_deserializer=job__pb2.Pagination.FromString,
                    response_serializer=job__pb2.ListEnvironmentResponse.SerializeToString,
            ),
            'ListWorkspaceIde': grpc.unary_unary_rpc_method_handler(
                    servicer.ListWorkspaceIde,
                    request_deserializer=job__pb2.Pagination.FromString,
                    response_serializer=job__pb2.ListIdeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'jobs.EnvironmentServices', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EnvironmentServices(object):
    """The Environment service definition.
    """

    @staticmethod
    def GetHardwareTier(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.EnvironmentServices/GetHardwareTier',
            job__pb2.ID.SerializeToString,
            job__pb2.HardwareTier.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateHardwareTier(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.EnvironmentServices/CreateHardwareTier',
            job__pb2.HardwareTier.SerializeToString,
            job__pb2.HardwareTier.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateHardwareTier(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.EnvironmentServices/UpdateHardwareTier',
            job__pb2.HardwareTier.SerializeToString,
            job__pb2.HardwareTier.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteHardwareTier(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.EnvironmentServices/DeleteHardwareTier',
            job__pb2.ID.SerializeToString,
            job__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListHardwareTiers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.EnvironmentServices/ListHardwareTiers',
            job__pb2.Pagination.SerializeToString,
            job__pb2.ListHardwareTierResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListEnvironments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.EnvironmentServices/ListEnvironments',
            job__pb2.Pagination.SerializeToString,
            job__pb2.ListEnvironmentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListWorkspaceIde(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobs.EnvironmentServices/ListWorkspaceIde',
            job__pb2.Pagination.SerializeToString,
            job__pb2.ListIdeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
